"paths": {
    "/App/ApiUsage/{applicationId}/": {
      "summary": "App.GetApplicationApiUsage",
      "description": "Get API usage by application for time frame specified. You can go as far back as 30 days ago, and can ask for up to a 48 hour window of time in a single request. You must be authenticated with at least the ReadUserData permission to access this endpoint.",
      "get": {
        "tags": [
          "App"
        ],
        "description": "Get API usage by application for time frame specified. You can go as far back as 30 days ago, and can ask for up to a 48 hour window of time in a single request. You must be authenticated with at least the ReadUserData permission to access this endpoint.",
        "operationId": "App.GetApplicationApiUsage",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "ID of the application to get usage statistics.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "End time for query. Goes to now if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start time for query. Goes to 24 hours ago if not specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Applications.ApiUsage"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "ReadUserData"
            ]
          }
        ]
      }
    },
    "/App/FirstParty/": {
      "summary": "App.GetBungieApplications",
      "description": "Get list of applications created by Bungie.",
      "get": {
        "tags": [
          "App"
        ],
        "description": "Get list of applications created by Bungie.",
        "operationId": "App.GetBungieApplications",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/IEnumerableOfApplication"
          }
        },
        "deprecated": false
      }
    },
    "/User/GetBungieNetUserById/{id}/": {
      "summary": "User.GetBungieNetUserById",
      "description": "Loads a bungienet user by membership id.",
      "get": {
        "tags": [
          "User"
        ],
        "description": "Loads a bungienet user by membership id.",
        "operationId": "User.GetBungieNetUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The requested Bungie.net membership id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/User.GeneralUser"
          }
        },
        "deprecated": false
      }
    },
    "/User/GetSanitizedPlatformDisplayNames/{membershipId}/": {
      "summary": "User.GetSanitizedPlatformDisplayNames",
      "description": "Gets a list of all display names linked to this membership id but sanitized (profanity filtered). Obeys all visibility rules of calling user and is heavily cached.",
      "get": {
        "tags": [
          "User"
        ],
        "description": "Gets a list of all display names linked to this membership id but sanitized (profanity filtered). Obeys all visibility rules of calling user and is heavily cached.",
        "operationId": "User.GetSanitizedPlatformDisplayNames",
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "description": "The requested membership id to load.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CEDictionaryOfBungieCredentialTypeAndstring"
          }
        },
        "deprecated": false
      }
    },
    "/User/GetCredentialTypesForTargetAccount/{membershipId}/": {
      "summary": "User.GetCredentialTypesForTargetAccount",
      "description": "Returns a list of credential types attached to the requested account",
      "get": {
        "tags": [
          "User"
        ],
        "description": "Returns a list of credential types attached to the requested account",
        "operationId": "User.GetCredentialTypesForTargetAccount",
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "description": "The user's membership id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListOfGetCredentialTypesForAccountResponse"
          }
        },
        "deprecated": false
      }
    },
    "/User/GetAvailableThemes/": {
      "summary": "User.GetAvailableThemes",
      "description": "Returns a list of all available user themes.",
      "get": {
        "tags": [
          "User"
        ],
        "description": "Returns a list of all available user themes.",
        "operationId": "User.GetAvailableThemes",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListOfUserTheme"
          }
        },
        "deprecated": false
      }
    },
    "/User/GetMembershipsById/{membershipId}/{membershipType}/": {
      "summary": "User.GetMembershipDataById",
      "description": "Returns a list of accounts associated with the supplied membership ID and membership type. This will include all linked accounts (even when hidden) if supplied credentials permit it.",
      "get": {
        "tags": [
          "User"
        ],
        "description": "Returns a list of accounts associated with the supplied membership ID and membership type. This will include all linked accounts (even when hidden) if supplied credentials permit it.",
        "operationId": "User.GetMembershipDataById",
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "description": "The membership ID of the target user.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "Type of the supplied membership ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/User.UserMembershipData"
          }
        },
        "deprecated": false
      }
    },
    "/User/GetMembershipsForCurrentUser/": {
      "summary": "User.GetMembershipDataForCurrentUser",
      "description": "Returns a list of accounts associated with signed in user. This is useful for OAuth implementations that do not give you access to the token response.",
      "get": {
        "tags": [
          "User"
        ],
        "description": "Returns a list of accounts associated with signed in user. This is useful for OAuth implementations that do not give you access to the token response.",
        "operationId": "User.GetMembershipDataForCurrentUser",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/User.UserMembershipData"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "ReadBasicUserProfile"
            ]
          }
        ]
      }
    },
    "/User/GetMembershipFromHardLinkedCredential/{crType}/{credential}/": {
      "summary": "User.GetMembershipFromHardLinkedCredential",
      "description": "Gets any hard linked membership given a credential. Only works for credentials that are public (just SteamID64 right now). Cross Save aware.",
      "get": {
        "tags": [
          "User"
        ],
        "description": "Gets any hard linked membership given a credential. Only works for credentials that are public (just SteamID64 right now). Cross Save aware.",
        "operationId": "User.GetMembershipFromHardLinkedCredential",
        "parameters": [
          {
            "name": "credential",
            "in": "path",
            "description": "The credential to look up. Must be a valid SteamID64.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "crType",
            "in": "path",
            "description": "The credential type. 'SteamId' is the only valid value at present.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of credentials the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.CredentialType.",
              "format": "byte",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieCredentialType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/User.HardLinkedUserMembership"
          }
        },
        "deprecated": false
      }
    },
    "/User/Search/Prefix/{displayNamePrefix}/{page}/": {
      "summary": "User.SearchByGlobalNamePrefix",
      "description": "[OBSOLETE] Do not use this to search users, use SearchByGlobalNamePost instead.",
      "get": {
        "tags": [
          "User"
        ],
        "description": "[OBSOLETE] Do not use this to search users, use SearchByGlobalNamePost instead.",
        "operationId": "User.SearchByGlobalNamePrefix",
        "parameters": [
          {
            "name": "displayNamePrefix",
            "in": "path",
            "description": "The display name prefix you're looking for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "path",
            "description": "The zero-based page of results you desire.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/User.UserSearchResponse"
          }
        },
        "deprecated": false
      }
    },
    "/User/Search/GlobalName/{page}/": {
      "summary": "User.SearchByGlobalNamePost",
      "description": "Given the prefix of a global display name, returns all users who share that name.",
      "post": {
        "tags": [
          "User"
        ],
        "description": "Given the prefix of a global display name, returns all users who share that name.",
        "operationId": "User.SearchByGlobalNamePost",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "The zero-based page of results you desire.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User.UserSearchPrefixRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/User.UserSearchResponse"
          }
        },
        "deprecated": false
      }
    },
    "/Content/GetContentType/{type}/": {
      "summary": "Content.GetContentType",
      "description": "Gets an object describing a particular variant of content.",
      "get": {
        "tags": [
          "Content"
        ],
        "description": "Gets an object describing a particular variant of content.",
        "operationId": "Content.GetContentType",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Content.Models.ContentTypeDescription"
          }
        },
        "deprecated": false
      }
    },
    "/Content/GetContentById/{id}/{locale}/": {
      "summary": "Content.GetContentById",
      "description": "Returns a content item referenced by id",
      "get": {
        "tags": [
          "Content"
        ],
        "description": "Returns a content item referenced by id",
        "operationId": "Content.GetContentById",
        "parameters": [
          {
            "name": "head",
            "in": "query",
            "description": "false",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "locale",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Content.ContentItemPublicContract"
          }
        },
        "deprecated": false
      }
    },
    "/Content/GetContentByTagAndType/{tag}/{type}/{locale}/": {
      "summary": "Content.GetContentByTagAndType",
      "description": "Returns the newest item that matches a given tag and Content Type.",
      "get": {
        "tags": [
          "Content"
        ],
        "description": "Returns the newest item that matches a given tag and Content Type.",
        "operationId": "Content.GetContentByTagAndType",
        "parameters": [
          {
            "name": "head",
            "in": "query",
            "description": "Not used.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "locale",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Content.ContentItemPublicContract"
          }
        },
        "deprecated": false
      }
    },
    "/Content/Search/{locale}/": {
      "summary": "Content.SearchContentWithText",
      "description": "Gets content based on querystring information passed in. Provides basic search and text search capabilities.",
      "get": {
        "tags": [
          "Content"
        ],
        "description": "Gets content based on querystring information passed in. Provides basic search and text search capabilities.",
        "operationId": "Content.SearchContentWithText",
        "parameters": [
          {
            "name": "ctype",
            "in": "query",
            "description": "Content type tag: Help, News, etc. Supply multiple ctypes separated by space.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentpage",
            "in": "query",
            "description": "Page number for the search results, starting with page 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "head",
            "in": "query",
            "description": "Not used.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "locale",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchtext",
            "in": "query",
            "description": "Word or phrase for the search.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "For analytics, hint at the part of the app that triggered the search. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Tag used on the content to be searched.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchResultOfContentItemPublicContract"
          }
        },
        "deprecated": false
      }
    },
    "/Content/SearchContentByTagAndType/{tag}/{type}/{locale}/": {
      "summary": "Content.SearchContentByTagAndType",
      "description": "Searches for Content Items that match the given Tag and Content Type.",
      "get": {
        "tags": [
          "Content"
        ],
        "description": "Searches for Content Items that match the given Tag and Content Type.",
        "operationId": "Content.SearchContentByTagAndType",
        "parameters": [
          {
            "name": "currentpage",
            "in": "query",
            "description": "Page number for the search results starting with page 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "head",
            "in": "query",
            "description": "Not used.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "itemsperpage",
            "in": "query",
            "description": "Not used.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locale",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchResultOfContentItemPublicContract"
          }
        },
        "deprecated": false
      }
    },
    "/Content/SearchHelpArticles/{searchtext}/{size}/": {
      "summary": "Content.SearchHelpArticles",
      "description": "Search for Help Articles.",
      "get": {
        "tags": [
          "Content"
        ],
        "description": "Search for Help Articles.",
        "operationId": "Content.SearchHelpArticles",
        "parameters": [
          {
            "name": "searchtext",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/IReadOnlyCollectionOfContentItemPublicContract"
          }
        },
        "deprecated": false
      }
    },
    "/Content/Rss/NewsArticles/{pageToken}/": {
      "summary": "Content.RssNewsArticles",
      "description": "Returns a JSON string response that is the RSS feed for news articles.",
      "get": {
        "tags": [
          "Content"
        ],
        "description": "Returns a JSON string response that is the RSS feed for news articles.",
        "operationId": "Content.RssNewsArticles",
        "parameters": [
          {
            "name": "pageToken",
            "in": "path",
            "description": "Zero-based pagination token for paging through result sets.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Content.NewsArticleRssResponse"
          }
        },
        "deprecated": false
      }
    },
    "/Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/": {
      "summary": "Forum.GetTopicsPaged",
      "description": "Get topics from any forum.",
      "get": {
        "tags": [
          "Forum"
        ],
        "description": "Get topics from any forum.",
        "operationId": "Forum.GetTopicsPaged",
        "parameters": [
          {
            "name": "categoryFilter",
            "in": "path",
            "description": "A category filter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Forum.ForumTopicsCategoryFiltersEnum"
              },
              "x-enum-is-bitmask": true
            }
          },
          {
            "name": "group",
            "in": "path",
            "description": "The group, if any.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "locales",
            "in": "query",
            "description": "Comma seperated list of locales posts must match to return in the result list. Default 'en'",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "path",
            "description": "Zero paged page number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "Unused",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "quickDate",
            "in": "path",
            "description": "A date filter.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Forum.ForumTopicsQuickDateEnum"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "sort",
            "in": "path",
            "description": "The sort mode.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "byte",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Forum.ForumTopicsSortEnum"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "tagstring",
            "in": "query",
            "description": "The tags to search, if any.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Forum.PostSearchResponse"
          }
        },
        "deprecated": false
      }
    },
    "/Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/": {
      "summary": "Forum.GetCoreTopicsPaged",
      "description": "Gets a listing of all topics marked as part of the core group.",
      "get": {
        "tags": [
          "Forum"
        ],
        "description": "Gets a listing of all topics marked as part of the core group.",
        "operationId": "Forum.GetCoreTopicsPaged",
        "parameters": [
          {
            "name": "categoryFilter",
            "in": "path",
            "description": "The category filter.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Forum.ForumTopicsCategoryFiltersEnum"
              },
              "x-enum-is-bitmask": true
            }
          },
          {
            "name": "locales",
            "in": "query",
            "description": "Comma seperated list of locales posts must match to return in the result list. Default 'en'",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "path",
            "description": "Zero base page",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "quickDate",
            "in": "path",
            "description": "The date filter.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Forum.ForumTopicsQuickDateEnum"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "sort",
            "in": "path",
            "description": "The sort mode.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "byte",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Forum.ForumTopicsSortEnum"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Forum.PostSearchResponse"
          }
        },
        "deprecated": false
      }
    },
    "/Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/": {
      "summary": "Forum.GetPostsThreadedPaged",
      "description": "Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.",
      "get": {
        "tags": [
          "Forum"
        ],
        "description": "Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.",
        "operationId": "Forum.GetPostsThreadedPaged",
        "parameters": [
          {
            "name": "getParentPost",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "parentPostId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "replySize",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "rootThreadMode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showbanned",
            "in": "query",
            "description": "If this value is not null or empty, banned posts are requested to be returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortMode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Forum.ForumPostSortEnum"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Forum.PostSearchResponse"
          }
        },
        "deprecated": false
      }
    },
    "/Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/": {
      "summary": "Forum.GetPostsThreadedPagedFromChild",
      "description": "Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.",
      "get": {
        "tags": [
          "Forum"
        ],
        "description": "Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.",
        "operationId": "Forum.GetPostsThreadedPagedFromChild",
        "parameters": [
          {
            "name": "childPostId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "replySize",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "rootThreadMode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showbanned",
            "in": "query",
            "description": "If this value is not null or empty, banned posts are requested to be returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortMode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Forum.ForumPostSortEnum"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Forum.PostSearchResponse"
          }
        },
        "deprecated": false
      }
    },
    "/Forum/GetPostAndParent/{childPostId}/": {
      "summary": "Forum.GetPostAndParent",
      "description": "Returns the post specified and its immediate parent.",
      "get": {
        "tags": [
          "Forum"
        ],
        "description": "Returns the post specified and its immediate parent.",
        "operationId": "Forum.GetPostAndParent",
        "parameters": [
          {
            "name": "childPostId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "showbanned",
            "in": "query",
            "description": "If this value is not null or empty, banned posts are requested to be returned",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Forum.PostSearchResponse"
          }
        },
        "deprecated": false
      }
    },
    "/Forum/GetPostAndParentAwaitingApproval/{childPostId}/": {
      "summary": "Forum.GetPostAndParentAwaitingApproval",
      "description": "Returns the post specified and its immediate parent of posts that are awaiting approval.",
      "get": {
        "tags": [
          "Forum"
        ],
        "description": "Returns the post specified and its immediate parent of posts that are awaiting approval.",
        "operationId": "Forum.GetPostAndParentAwaitingApproval",
        "parameters": [
          {
            "name": "childPostId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "showbanned",
            "in": "query",
            "description": "If this value is not null or empty, banned posts are requested to be returned",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Forum.PostSearchResponse"
          }
        },
        "deprecated": false
      }
    },
    "/Forum/GetTopicForContent/{contentId}/": {
      "summary": "Forum.GetTopicForContent",
      "description": "Gets the post Id for the given content item's comments, if it exists.",
      "get": {
        "tags": [
          "Forum"
        ],
        "description": "Gets the post Id for the given content item's comments, if it exists.",
        "operationId": "Forum.GetTopicForContent",
        "parameters": [
          {
            "name": "contentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/int64"
          }
        },
        "deprecated": false
      }
    },
    "/Forum/GetForumTagSuggestions/": {
      "summary": "Forum.GetForumTagSuggestions",
      "description": "Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.",
      "get": {
        "tags": [
          "Forum"
        ],
        "description": "Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.",
        "operationId": "Forum.GetForumTagSuggestions",
        "parameters": [
          {
            "name": "partialtag",
            "in": "query",
            "description": "The partial tag input to generate suggestions from.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListOfTagResponse"
          }
        },
        "deprecated": false
      }
    },
    "/Forum/Poll/{topicId}/": {
      "summary": "Forum.GetPoll",
      "description": "Gets the specified forum poll.",
      "get": {
        "tags": [
          "Forum"
        ],
        "description": "Gets the specified forum poll.",
        "operationId": "Forum.GetPoll",
        "parameters": [
          {
            "name": "topicId",
            "in": "path",
            "description": "The post id of the topic that has the poll.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Forum.PostSearchResponse"
          }
        },
        "deprecated": false
      }
    },
    "/Forum/Recruit/Summaries/": {
      "summary": "Forum.GetRecruitmentThreadSummaries",
      "description": "Allows the caller to get a list of to 25 recruitment thread summary information objects.",
      "post": {
        "tags": [
          "Forum"
        ],
        "description": "Allows the caller to get a list of to 25 recruitment thread summary information objects.",
        "operationId": "Forum.GetRecruitmentThreadSummaries",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CEListOfForumRecruitmentDetail"
          }
        },
        "deprecated": false
      }
    },
    "/GroupV2/GetAvailableAvatars/": {
      "summary": "GroupV2.GetAvailableAvatars",
      "description": "Returns a list of all available group avatars for the signed-in user.",
      "get": {
        "tags": [
          "GroupV2"
        ],
        "description": "Returns a list of all available group avatars for the signed-in user.",
        "operationId": "GroupV2.GetAvailableAvatars",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DictionaryOfint32Andstring"
          }
        },
        "deprecated": false
      }
    },
    "/GroupV2/GetAvailableThemes/": {
      "summary": "GroupV2.GetAvailableThemes",
      "description": "Returns a list of all available group themes.",
      "get": {
        "tags": [
          "GroupV2"
        ],
        "description": "Returns a list of all available group themes.",
        "operationId": "GroupV2.GetAvailableThemes",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListOfGroupTheme"
          }
        },
        "deprecated": false
      }
    },
    "/GroupV2/GetUserClanInviteSetting/{mType}/": {
      "summary": "GroupV2.GetUserClanInviteSetting",
      "description": "Gets the state of the user's clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.",
      "get": {
        "tags": [
          "GroupV2"
        ],
        "description": "Gets the state of the user's clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.",
        "operationId": "GroupV2.GetUserClanInviteSetting",
        "parameters": [
          {
            "name": "mType",
            "in": "path",
            "description": "The Destiny membership type of the account we wish to access settings.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/boolean"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "ReadUserData"
            ]
          }
        ]
      }
    },
    "/GroupV2/Recommended/{groupType}/{createDateRange}/": {
      "summary": "GroupV2.GetRecommendedGroups",
      "description": "Gets groups recommended for you based on the groups to whom those you follow belong.",
      "post": {
        "tags": [
          "GroupV2"
        ],
        "description": "Gets groups recommended for you based on the groups to whom those you follow belong.",
        "operationId": "GroupV2.GetRecommendedGroups",
        "parameters": [
          {
            "name": "createDateRange",
            "in": "path",
            "description": "Requested range in which to pull recommended groups",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/GroupsV2.GroupDateRange"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "groupType",
            "in": "path",
            "description": "Type of groups requested",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/GroupsV2.GroupType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListOfGroupV2Card"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "ReadGroups"
            ]
          }
        ]
      }
    },
    "/GroupV2/Search/": {
      "summary": "GroupV2.GroupSearch",
      "description": "Search for Groups.",
      "post": {
        "tags": [
          "GroupV2"
        ],
        "description": "Search for Groups.",
        "operationId": "GroupV2.GroupSearch",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupsV2.GroupQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/GroupsV2.GroupSearchResponse"
          }
        },
        "deprecated": false
      }
    },
    "/GroupV2/{groupId}/": {
      "summary": "GroupV2.GetGroup",
      "description": "Get information about a specific group of the given ID.",
      "get": {
        "tags": [
          "GroupV2"
        ],
        "description": "Get information about a specific group of the given ID.",
        "operationId": "GroupV2.GetGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Requested group's id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GroupsV2.GroupResponse"
          }
        },
        "deprecated": false
      }
    },
    "/GroupV2/Name/{groupName}/{groupType}/": {
      "summary": "GroupV2.GetGroupByName",
      "description": "Get information about a specific group with the given name and type.",
      "get": {
        "tags": [
          "GroupV2"
        ],
        "description": "Get information about a specific group with the given name and type.",
        "operationId": "GroupV2.GetGroupByName",
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "description": "Exact name of the group to find.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupType",
            "in": "path",
            "description": "Type of group to find.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/GroupsV2.GroupType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GroupsV2.GroupResponse"
          }
        },
        "deprecated": false
      }
    },
    "/GroupV2/NameV2/": {
      "summary": "GroupV2.GetGroupByNameV2",
      "description": "Get information about a specific group with the given name and type. The POST version.",
      "post": {
        "tags": [
          "GroupV2"
        ],
        "description": "Get information about a specific group with the given name and type. The POST version.",
        "operationId": "GroupV2.GetGroupByNameV2",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupsV2.GroupNameSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/GroupsV2.GroupResponse"
          }
        },
        "deprecated": false
      }
    },
    "/GroupV2/{groupId}/OptionalConversations/": {
      "summary": "GroupV2.GetGroupOptionalConversations",
      "description": "Gets a list of available optional conversation channels and their settings.",
      "get": {
        "tags": [
          "GroupV2"
        ],
        "description": "Gets a list of available optional conversation channels and their settings.",
        "operationId": "GroupV2.GetGroupOptionalConversations",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Requested group's id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CEListOfGroupOptionalConversation"
          }
        },
        "deprecated": false
      }
    },
    "/GroupV2/{groupId}/Edit/": {
      "summary": "GroupV2.EditGroup",
      "description": "Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.",
      "post": {
        "tags": [
          "GroupV2"
        ],
        "description": "Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.",
        "operationId": "GroupV2.EditGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID of the group to edit.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupsV2.GroupEditAction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/int32"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdminGroups"
            ]
          }
        ]
      }
    },
    "/GroupV2/{groupId}/EditClanBanner/": {
      "summary": "GroupV2.EditClanBanner",
      "description": "Edit an existing group's clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.",
      "post": {
        "tags": [
          "GroupV2"
        ],
        "description": "Edit an existing group's clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.",
        "operationId": "GroupV2.EditClanBanner",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID of the group to edit.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupsV2.ClanBanner"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/int32"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdminGroups"
            ]
          }
        ]
      }
    },
    "/GroupV2/{groupId}/EditFounderOptions/": {
      "summary": "GroupV2.EditFounderOptions",
      "description": "Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.",
      "post": {
        "tags": [
          "GroupV2"
        ],
        "description": "Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.",
        "operationId": "GroupV2.EditFounderOptions",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID of the group to edit.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupsV2.GroupOptionsEditAction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/int32"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdminGroups"
            ]
          }
        ]
      }
    },
    "/GroupV2/{groupId}/OptionalConversations/Add/": {
      "summary": "GroupV2.AddOptionalConversation",
      "description": "Add a new optional conversation/chat channel. Requires admin permissions to the group.",
      "post": {
        "tags": [
          "GroupV2"
        ],
        "description": "Add a new optional conversation/chat channel. Requires admin permissions to the group.",
        "operationId": "GroupV2.AddOptionalConversation",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID of the group to edit.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupsV2.GroupOptionalConversationAddRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/int64"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdminGroups"
            ]
          }
        ]
      }
    },
    "/GroupV2/{groupId}/OptionalConversations/Edit/{conversationId}/": {
      "summary": "GroupV2.EditOptionalConversation",
      "description": "Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.",
      "post": {
        "tags": [
          "GroupV2"
        ],
        "description": "Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.",
        "operationId": "GroupV2.EditOptionalConversation",
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "description": "Conversation Id of the channel being edited.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID of the group to edit.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupsV2.GroupOptionalConversationEditRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/int64"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdminGroups"
            ]
          }
        ]
      }
    },
    "/GroupV2/{groupId}/Members/": {
      "summary": "GroupV2.GetMembersOfGroup",
      "description": "Get the list of members in a given group.",
      "get": {
        "tags": [
          "GroupV2"
        ],
        "description": "Get the list of members in a given group.",
        "operationId": "GroupV2.GetMembersOfGroup",
        "parameters": [
          {
            "name": "currentpage",
            "in": "path",
            "description": "Page number (starting with 1). Each page has a fixed size of 50 items per page.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The ID of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "memberType",
            "in": "query",
            "description": "Filter out other member types. Use None for all members.",
            "schema": {
              "type": "integer",
              "description": "The member levels used by all V2 Groups API. Individual group types use their own mappings in their native storage (general uses BnetDbGroupMemberType and D2 clans use ClanMemberLevel), but they are all translated to this in the runtime api. These runtime values should NEVER be stored anywhere, so the values can be changed as necessary.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/GroupsV2.RuntimeGroupMemberType"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "nameSearch",
            "in": "query",
            "description": "The name fragment upon which a search should be executed for members with matching display or unique names.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchResultOfGroupMember"
          }
        },
        "deprecated": false
      }
    },
    "/GroupV2/{groupId}/AdminsAndFounder/": {
      "summary": "GroupV2.GetAdminsAndFounderOfGroup",
      "description": "Get the list of members in a given group who are of admin level or higher.",
      "get": {
        "tags": [
          "GroupV2"
        ],
        "description": "Get the list of members in a given group who are of admin level or higher.",
        "operationId": "GroupV2.GetAdminsAndFounderOfGroup",
        "parameters": [
          {
            "name": "currentpage",
            "in": "path",
            "description": "Page number (starting with 1). Each page has a fixed size of 50 items per page.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The ID of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchResultOfGroupMember"
          }
        },
        "deprecated": false
      }
    },
    "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/SetMembershipType/{memberType}/": {
      "summary": "GroupV2.EditGroupMembership",
      "description": "Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.",
      "post": {
        "tags": [
          "GroupV2"
        ],
        "description": "Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.",
        "operationId": "GroupV2.EditGroupMembership",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of the group to which the member belongs.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "description": "Membership ID to modify.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "Membership type of the provide membership ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "memberType",
            "in": "path",
            "description": "New membertype for the specified member.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The member levels used by all V2 Groups API. Individual group types use their own mappings in their native storage (general uses BnetDbGroupMemberType and D2 clans use ClanMemberLevel), but they are all translated to this in the runtime api. These runtime values should NEVER be stored anywhere, so the values can be changed as necessary.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/GroupsV2.RuntimeGroupMemberType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/int32"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdminGroups"
            ]
          }
        ]
      }
    },
    "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Kick/": {
      "summary": "GroupV2.KickMember",
      "description": "Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.",
      "post": {
        "tags": [
          "GroupV2"
        ],
        "description": "Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.",
        "operationId": "GroupV2.KickMember",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID to kick the user from.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "description": "Membership ID to kick.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "Membership type of the provided membership ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GroupsV2.GroupMemberLeaveResult"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdminGroups"
            ]
          }
        ]
      }
    },
    "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Ban/": {
      "summary": "GroupV2.BanMember",
      "description": "Bans the requested member from the requested group for the specified period of time.",
      "post": {
        "tags": [
          "GroupV2"
        ],
        "description": "Bans the requested member from the requested group for the specified period of time.",
        "operationId": "GroupV2.BanMember",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID that has the member to ban.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "description": "Membership ID of the member to ban from the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "Membership type of the provided membership ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupsV2.GroupBanRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/int32"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdminGroups"
            ]
          }
        ]
      }
    },
    "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Unban/": {
      "summary": "GroupV2.UnbanMember",
      "description": "Unbans the requested member, allowing them to re-apply for membership.",
      "post": {
        "tags": [
          "GroupV2"
        ],
        "description": "Unbans the requested member, allowing them to re-apply for membership.",
        "operationId": "GroupV2.UnbanMember",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "description": "Membership ID of the member to unban from the group",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "Membership type of the provided membership ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/int32"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdminGroups"
            ]
          }
        ]
      }
    },
    "/GroupV2/{groupId}/Banned/": {
      "summary": "GroupV2.GetBannedMembersOfGroup",
      "description": "Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.",
      "get": {
        "tags": [
          "GroupV2"
        ],
        "description": "Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.",
        "operationId": "GroupV2.GetBannedMembersOfGroup",
        "parameters": [
          {
            "name": "currentpage",
            "in": "path",
            "description": "Page number (starting with 1). Each page has a fixed size of 50 entries.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID whose banned members you are fetching",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchResultOfGroupBan"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdminGroups"
            ]
          }
        ]
      }
    },
    "/GroupV2/{groupId}/Admin/AbdicateFoundership/{membershipType}/{founderIdNew}/": {
      "summary": "GroupV2.AbdicateFoundership",
      "description": "An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.",
      "post": {
        "tags": [
          "GroupV2"
        ],
        "description": "An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.",
        "operationId": "GroupV2.AbdicateFoundership",
        "parameters": [
          {
            "name": "founderIdNew",
            "in": "path",
            "description": "The new founder for this group. Must already be a group admin.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The target group id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "Membership type of the provided founderIdNew.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/boolean"
          }
        },
        "deprecated": false
      }
    },
    "/GroupV2/{groupId}/Members/Pending/": {
      "summary": "GroupV2.GetPendingMemberships",
      "description": "Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.",
      "get": {
        "tags": [
          "GroupV2"
        ],
        "description": "Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.",
        "operationId": "GroupV2.GetPendingMemberships",
        "parameters": [
          {
            "name": "currentpage",
            "in": "path",
            "description": "Page number (starting with 1). Each page has a fixed size of 50 items per page.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchResultOfGroupMemberApplication"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdminGroups"
            ]
          }
        ]
      }
    },
    "/GroupV2/{groupId}/Members/InvitedIndividuals/": {
      "summary": "GroupV2.GetInvitedIndividuals",
      "description": "Get the list of users who have been invited into the group.",
      "get": {
        "tags": [
          "GroupV2"
        ],
        "description": "Get the list of users who have been invited into the group.",
        "operationId": "GroupV2.GetInvitedIndividuals",
        "parameters": [
          {
            "name": "currentpage",
            "in": "path",
            "description": "Page number (starting with 1). Each page has a fixed size of 50 items per page.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchResultOfGroupMemberApplication"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdminGroups"
            ]
          }
        ]
      }
    },
    "/GroupV2/{groupId}/Members/ApproveAll/": {
      "summary": "GroupV2.ApproveAllPending",
      "description": "Approve all of the pending users for the given group.",
      "post": {
        "tags": [
          "GroupV2"
        ],
        "description": "Approve all of the pending users for the given group.",
        "operationId": "GroupV2.ApproveAllPending",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupsV2.GroupApplicationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListOfEntityActionResult"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdminGroups"
            ]
          }
        ]
      }
    },
    "/GroupV2/{groupId}/Members/DenyAll/": {
      "summary": "GroupV2.DenyAllPending",
      "description": "Deny all of the pending users for the given group.",
      "post": {
        "tags": [
          "GroupV2"
        ],
        "description": "Deny all of the pending users for the given group.",
        "operationId": "GroupV2.DenyAllPending",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupsV2.GroupApplicationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListOfEntityActionResult"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdminGroups"
            ]
          }
        ]
      }
    },
    "/GroupV2/{groupId}/Members/ApproveList/": {
      "summary": "GroupV2.ApprovePendingForList",
      "description": "Approve all of the pending users for the given group.",
      "post": {
        "tags": [
          "GroupV2"
        ],
        "description": "Approve all of the pending users for the given group.",
        "operationId": "GroupV2.ApprovePendingForList",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupsV2.GroupApplicationListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListOfEntityActionResult"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdminGroups"
            ]
          }
        ]
      }
    },
    "/GroupV2/{groupId}/Members/Approve/{membershipType}/{membershipId}/": {
      "summary": "GroupV2.ApprovePending",
      "description": "Approve the given membershipId to join the group/clan as long as they have applied.",
      "post": {
        "tags": [
          "GroupV2"
        ],
        "description": "Approve the given membershipId to join the group/clan as long as they have applied.",
        "operationId": "GroupV2.ApprovePending",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "description": "The membership id being approved.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "Membership type of the supplied membership ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupsV2.GroupApplicationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/boolean"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdminGroups"
            ]
          }
        ]
      }
    },
    "/GroupV2/{groupId}/Members/DenyList/": {
      "summary": "GroupV2.DenyPendingForList",
      "description": "Deny all of the pending users for the given group that match the passed-in .",
      "post": {
        "tags": [
          "GroupV2"
        ],
        "description": "Deny all of the pending users for the given group that match the passed-in .",
        "operationId": "GroupV2.DenyPendingForList",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupsV2.GroupApplicationListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListOfEntityActionResult"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdminGroups"
            ]
          }
        ]
      }
    },
    "/GroupV2/User/{membershipType}/{membershipId}/{filter}/{groupType}/": {
      "summary": "GroupV2.GetGroupsForMember",
      "description": "Get information about the groups that a given member has joined.",
      "get": {
        "tags": [
          "GroupV2"
        ],
        "description": "Get information about the groups that a given member has joined.",
        "operationId": "GroupV2.GetGroupsForMember",
        "parameters": [
          {
            "name": "filter",
            "in": "path",
            "description": "Filter apply to list of joined groups.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/GroupsV2.GroupsForMemberFilter"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "groupType",
            "in": "path",
            "description": "Type of group the supplied member founded.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/GroupsV2.GroupType"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "description": "Membership ID to for which to find founded groups.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "Membership type of the supplied membership ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GroupsV2.GetGroupsForMemberResponse"
          }
        },
        "deprecated": false
      }
    },
    "/GroupV2/Recover/{membershipType}/{membershipId}/{groupType}/": {
      "summary": "GroupV2.RecoverGroupForFounder",
      "description": "Allows a founder to manually recover a group they can see in game but not on bungie.net",
      "get": {
        "tags": [
          "GroupV2"
        ],
        "description": "Allows a founder to manually recover a group they can see in game but not on bungie.net",
        "operationId": "GroupV2.RecoverGroupForFounder",
        "parameters": [
          {
            "name": "groupType",
            "in": "path",
            "description": "Type of group the supplied member founded.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/GroupsV2.GroupType"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "description": "Membership ID to for which to find founded groups.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "Membership type of the supplied membership ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GroupsV2.GroupMembershipSearchResponse"
          }
        },
        "deprecated": false
      }
    },
    "/GroupV2/User/Potential/{membershipType}/{membershipId}/{filter}/{groupType}/": {
      "summary": "GroupV2.GetPotentialGroupsForMember",
      "description": "Get information about the groups that a given member has applied to or been invited to.",
      "get": {
        "tags": [
          "GroupV2"
        ],
        "description": "Get information about the groups that a given member has applied to or been invited to.",
        "operationId": "GroupV2.GetPotentialGroupsForMember",
        "parameters": [
          {
            "name": "filter",
            "in": "path",
            "description": "Filter apply to list of potential joined groups.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/GroupsV2.GroupPotentialMemberStatus"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "groupType",
            "in": "path",
            "description": "Type of group the supplied member applied.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/GroupsV2.GroupType"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "description": "Membership ID to for which to find applied groups.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "Membership type of the supplied membership ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GroupsV2.GroupPotentialMembershipSearchResponse"
          }
        },
        "deprecated": false
      }
    },
    "/GroupV2/{groupId}/Members/IndividualInvite/{membershipType}/{membershipId}/": {
      "summary": "GroupV2.IndividualGroupInvite",
      "description": "Invite a user to join this group.",
      "post": {
        "tags": [
          "GroupV2"
        ],
        "description": "Invite a user to join this group.",
        "operationId": "GroupV2.IndividualGroupInvite",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of the group you would like to join.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "description": "Membership id of the account being invited.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "MembershipType of the account being invited.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupsV2.GroupApplicationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/GroupsV2.GroupApplicationResponse"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdminGroups"
            ]
          }
        ]
      }
    },
    "/GroupV2/{groupId}/Members/IndividualInviteCancel/{membershipType}/{membershipId}/": {
      "summary": "GroupV2.IndividualGroupInviteCancel",
      "description": "Cancels a pending invitation to join a group.",
      "post": {
        "tags": [
          "GroupV2"
        ],
        "description": "Cancels a pending invitation to join a group.",
        "operationId": "GroupV2.IndividualGroupInviteCancel",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of the group you would like to join.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "description": "Membership id of the account being cancelled.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "MembershipType of the account being cancelled.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GroupsV2.GroupApplicationResponse"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdminGroups"
            ]
          }
        ]
      }
    },
    "/Tokens/Partner/ForceDropsRepair/": {
      "summary": "Tokens.ForceDropsRepair",
      "description": "Twitch Drops self-repair function - scans twitch for drops not marked as fulfilled and resyncs them.",
      "post": {
        "tags": [
          "Tokens"
        ],
        "description": "Twitch Drops self-repair function - scans twitch for drops not marked as fulfilled and resyncs them.",
        "operationId": "Tokens.ForceDropsRepair",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/boolean"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "PartnerOfferGrant"
            ]
          }
        ]
      }
    },
    "/Tokens/Partner/ClaimOffer/": {
      "summary": "Tokens.ClaimPartnerOffer",
      "description": "Claim a partner offer as the authenticated user.",
      "post": {
        "tags": [
          "Tokens"
        ],
        "description": "Claim a partner offer as the authenticated user.",
        "operationId": "Tokens.ClaimPartnerOffer",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tokens.PartnerOfferClaimRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/boolean"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "PartnerOfferGrant"
            ]
          }
        ]
      }
    },
    "/Tokens/Partner/ApplyMissingOffers/{partnerApplicationId}/{targetBnetMembershipId}/": {
      "summary": "Tokens.ApplyMissingPartnerOffersWithoutClaim",
      "description": "Apply a partner offer to the targeted user. This endpoint does not claim a new offer, but any already claimed offers will be applied to the game if not already.",
      "post": {
        "tags": [
          "Tokens"
        ],
        "description": "Apply a partner offer to the targeted user. This endpoint does not claim a new offer, but any already claimed offers will be applied to the game if not already.",
        "operationId": "Tokens.ApplyMissingPartnerOffersWithoutClaim",
        "parameters": [
          {
            "name": "partnerApplicationId",
            "in": "path",
            "description": "The partner application identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "targetBnetMembershipId",
            "in": "path",
            "description": "The bungie.net user to apply missing offers to. If not self, elevated permissions are required.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/boolean"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "PartnerOfferGrant"
            ]
          }
        ]
      }
    },
    "/Tokens/Partner/History/{partnerApplicationId}/{targetBnetMembershipId}/": {
      "summary": "Tokens.GetPartnerOfferSkuHistory",
      "description": "Returns the partner sku and offer history of the targeted user. Elevated permissions are required to see users that are not yourself.",
      "get": {
        "tags": [
          "Tokens"
        ],
        "description": "Returns the partner sku and offer history of the targeted user. Elevated permissions are required to see users that are not yourself.",
        "operationId": "Tokens.GetPartnerOfferSkuHistory",
        "parameters": [
          {
            "name": "partnerApplicationId",
            "in": "path",
            "description": "The partner application identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "targetBnetMembershipId",
            "in": "path",
            "description": "The bungie.net user to apply missing offers to. If not self, elevated permissions are required.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CEListOfPartnerOfferSkuHistoryResponse"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "PartnerOfferGrant"
            ]
          }
        ]
      }
    },
    "/Tokens/Partner/History/{targetBnetMembershipId}/Application/{partnerApplicationId}/": {
      "summary": "Tokens.GetPartnerRewardHistory",
      "description": "Returns the partner rewards history of the targeted user, both partner offers and Twitch drops.",
      "get": {
        "tags": [
          "Tokens"
        ],
        "description": "Returns the partner rewards history of the targeted user, both partner offers and Twitch drops.",
        "operationId": "Tokens.GetPartnerRewardHistory",
        "parameters": [
          {
            "name": "partnerApplicationId",
            "in": "path",
            "description": "The partner application identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "targetBnetMembershipId",
            "in": "path",
            "description": "The bungie.net user to return reward history for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Tokens.PartnerRewardHistoryResponse"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "PartnerOfferGrant"
            ]
          }
        ]
      }
    },
    "/Tokens/Rewards/GetRewardsForUser/{membershipId}/": {
      "summary": "Tokens.GetBungieRewardsForUser",
      "description": "Returns the bungie rewards for the targeted user.",
      "get": {
        "tags": [
          "Tokens"
        ],
        "description": "Returns the bungie rewards for the targeted user.",
        "operationId": "Tokens.GetBungieRewardsForUser",
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "description": "bungie.net user membershipId for requested user rewards. If not self, elevated permissions are required.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DictionaryOfstringAndBungieRewardDisplay"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "ReadAndApplyTokens"
            ]
          }
        ]
      }
    },
    "/Tokens/Rewards/GetRewardsForPlatformUser/{membershipId}/{membershipType}/": {
      "summary": "Tokens.GetBungieRewardsForPlatformUser",
      "description": "Returns the bungie rewards for the targeted user when a platform membership Id and Type are used.",
      "get": {
        "tags": [
          "Tokens"
        ],
        "description": "Returns the bungie rewards for the targeted user when a platform membership Id and Type are used.",
        "operationId": "Tokens.GetBungieRewardsForPlatformUser",
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "description": "users platform membershipId for requested user rewards. If not self, elevated permissions are required.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "The target Destiny 2 membership type.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DictionaryOfstringAndBungieRewardDisplay"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "ReadAndApplyTokens"
            ]
          }
        ]
      }
    },
    "/Tokens/Rewards/BungieRewards/": {
      "summary": "Tokens.GetBungieRewardsList",
      "description": "Returns a list of the current bungie rewards",
      "get": {
        "tags": [
          "Tokens"
        ],
        "description": "Returns a list of the current bungie rewards",
        "operationId": "Tokens.GetBungieRewardsList",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DictionaryOfstringAndBungieRewardDisplay"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/Manifest/": {
      "summary": "Destiny2.GetDestinyManifest",
      "description": "Returns the current version of the manifest as a json object.",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Returns the current version of the manifest as a json object.",
        "operationId": "Destiny2.GetDestinyManifest",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.Config.DestinyManifest"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/Manifest/{entityType}/{hashIdentifier}/": {
      "summary": "Destiny2.GetDestinyEntityDefinition",
      "description": "Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don't use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don't use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.",
        "operationId": "Destiny2.GetDestinyEntityDefinition",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "The type of entity for whom you would like results. These correspond to the entity's definition contract name. For instance, if you are looking for items, this property should be 'DestinyInventoryItemDefinition'. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hashIdentifier",
            "in": "path",
            "description": "The hash identifier for the specific Entity you want returned.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.Definitions.DestinyDefinition"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/SearchDestinyPlayerByBungieName/{membershipType}/": {
      "summary": "Destiny2.SearchDestinyPlayerByBungieName",
      "description": "Returns a list of Destiny memberships given a global Bungie Display Name. This method will hide overridden memberships due to cross save.",
      "post": {
        "tags": [
          "Destiny2"
        ],
        "description": "Returns a list of Destiny memberships given a global Bungie Display Name. This method will hide overridden memberships due to cross save.",
        "operationId": "Destiny2.SearchDestinyPlayerByBungieName",
        "parameters": [
          {
            "name": "membershipType",
            "in": "path",
            "description": "A valid non-BungieNet membership type, or All. Indicates which memberships to return. You probably want this set to All.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User.ExactSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/IEnumerableOfUserInfoCard"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/{membershipType}/Profile/{membershipId}/LinkedProfiles/": {
      "summary": "Destiny2.GetLinkedProfiles",
      "description": "Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.",
        "operationId": "Destiny2.GetLinkedProfiles",
        "parameters": [
          {
            "name": "getAllMemberships",
            "in": "query",
            "description": "(optional) if set to 'true', all memberships regardless of whether they're obscured by overrides will be returned. Normal privacy restrictions on account linking will still apply no matter what.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "description": "The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don't pass us a PSN membership ID and the XBox membership type, it's not going to work!",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "The type for the membership whose linked Destiny accounts you want returned.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.Responses.DestinyLinkedProfilesResponse"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/": {
      "summary": "Destiny2.GetProfile",
      "description": "Returns Destiny Profile information for the supplied membership.",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Returns Destiny Profile information for the supplied membership.",
        "operationId": "Destiny2.GetProfile",
        "parameters": [
          {
            "name": "components",
            "in": "query",
            "description": "A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "description": "Represents the possible components that can be returned from Destiny \"Get\" calls such as GetProfile, GetCharacter, GetVendor etc...\r\nWhen making one of these requests, you will pass one or more of these components as a comma separated list in the \"?components=\" querystring parameter. For instance, if you want baseline Profile data, Character Data, and character progressions, you would pass \"?components=Profiles,Characters,CharacterProgressions\" You may use either the numerical or string values.",
                "format": "int32",
                "x-enum-reference": {
                  "$ref": "#/components/schemas/Destiny.DestinyComponentType"
                },
                "x-enum-is-bitmask": false
              }
            }
          },
          {
            "name": "destinyMembershipId",
            "in": "path",
            "description": "Destiny membership ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "A valid non-BungieNet membership type.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.Responses.DestinyProfileResponse"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/": {
      "summary": "Destiny2.GetCharacter",
      "description": "Returns character information for the supplied character.",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Returns character information for the supplied character.",
        "operationId": "Destiny2.GetCharacter",
        "parameters": [
          {
            "name": "characterId",
            "in": "path",
            "description": "ID of the character.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "components",
            "in": "query",
            "description": "A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "description": "Represents the possible components that can be returned from Destiny \"Get\" calls such as GetProfile, GetCharacter, GetVendor etc...\r\nWhen making one of these requests, you will pass one or more of these components as a comma separated list in the \"?components=\" querystring parameter. For instance, if you want baseline Profile data, Character Data, and character progressions, you would pass \"?components=Profiles,Characters,CharacterProgressions\" You may use either the numerical or string values.",
                "format": "int32",
                "x-enum-reference": {
                  "$ref": "#/components/schemas/Destiny.DestinyComponentType"
                },
                "x-enum-is-bitmask": false
              }
            }
          },
          {
            "name": "destinyMembershipId",
            "in": "path",
            "description": "Destiny membership ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "A valid non-BungieNet membership type.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.Responses.DestinyCharacterResponse"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/Clan/{groupId}/WeeklyRewardState/": {
      "summary": "Destiny2.GetClanWeeklyRewardState",
      "description": "Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.",
        "operationId": "Destiny2.GetClanWeeklyRewardState",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "A valid group id of clan.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.Milestones.DestinyMilestone"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/Clan/ClanBannerDictionary/": {
      "summary": "Destiny2.GetClanBannerSource",
      "description": "Returns the dictionary of values for the Clan Banner",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Returns the dictionary of values for the Clan Banner",
        "operationId": "Destiny2.GetClanBannerSource",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Config.ClanBanner.ClanBannerSource"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Item/{itemInstanceId}/": {
      "summary": "Destiny2.GetItem",
      "description": "Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.",
        "operationId": "Destiny2.GetItem",
        "parameters": [
          {
            "name": "components",
            "in": "query",
            "description": "A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "description": "Represents the possible components that can be returned from Destiny \"Get\" calls such as GetProfile, GetCharacter, GetVendor etc...\r\nWhen making one of these requests, you will pass one or more of these components as a comma separated list in the \"?components=\" querystring parameter. For instance, if you want baseline Profile data, Character Data, and character progressions, you would pass \"?components=Profiles,Characters,CharacterProgressions\" You may use either the numerical or string values.",
                "format": "int32",
                "x-enum-reference": {
                  "$ref": "#/components/schemas/Destiny.DestinyComponentType"
                },
                "x-enum-is-bitmask": false
              }
            }
          },
          {
            "name": "destinyMembershipId",
            "in": "path",
            "description": "The membership ID of the destiny profile.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "itemInstanceId",
            "in": "path",
            "description": "The Instance ID of the destiny item.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "A valid non-BungieNet membership type.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.Responses.DestinyItemResponse"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/": {
      "summary": "Destiny2.GetVendors",
      "description": "Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.",
        "operationId": "Destiny2.GetVendors",
        "parameters": [
          {
            "name": "characterId",
            "in": "path",
            "description": "The Destiny Character ID of the character for whom we're getting vendor info.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "components",
            "in": "query",
            "description": "A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "description": "Represents the possible components that can be returned from Destiny \"Get\" calls such as GetProfile, GetCharacter, GetVendor etc...\r\nWhen making one of these requests, you will pass one or more of these components as a comma separated list in the \"?components=\" querystring parameter. For instance, if you want baseline Profile data, Character Data, and character progressions, you would pass \"?components=Profiles,Characters,CharacterProgressions\" You may use either the numerical or string values.",
                "format": "int32",
                "x-enum-reference": {
                  "$ref": "#/components/schemas/Destiny.DestinyComponentType"
                },
                "x-enum-is-bitmask": false
              }
            }
          },
          {
            "name": "destinyMembershipId",
            "in": "path",
            "description": "Destiny membership ID of another user. You may be denied.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The filter of what vendors and items to return, if any.",
            "schema": {
              "type": "integer",
              "description": "Indicates the type of filter to apply to Vendor results.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Destiny.DestinyVendorFilter"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "A valid non-BungieNet membership type.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.Responses.DestinyVendorsResponse"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/{vendorHash}/": {
      "summary": "Destiny2.GetVendor",
      "description": "Get the details of a specific Vendor.",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Get the details of a specific Vendor.",
        "operationId": "Destiny2.GetVendor",
        "parameters": [
          {
            "name": "characterId",
            "in": "path",
            "description": "The Destiny Character ID of the character for whom we're getting vendor info.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "components",
            "in": "query",
            "description": "A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "description": "Represents the possible components that can be returned from Destiny \"Get\" calls such as GetProfile, GetCharacter, GetVendor etc...\r\nWhen making one of these requests, you will pass one or more of these components as a comma separated list in the \"?components=\" querystring parameter. For instance, if you want baseline Profile data, Character Data, and character progressions, you would pass \"?components=Profiles,Characters,CharacterProgressions\" You may use either the numerical or string values.",
                "format": "int32",
                "x-enum-reference": {
                  "$ref": "#/components/schemas/Destiny.DestinyComponentType"
                },
                "x-enum-is-bitmask": false
              }
            }
          },
          {
            "name": "destinyMembershipId",
            "in": "path",
            "description": "Destiny membership ID of another user. You may be denied.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "A valid non-BungieNet membership type.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "vendorHash",
            "in": "path",
            "description": "The Hash identifier of the Vendor to be returned.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.Responses.DestinyVendorResponse"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/Vendors/": {
      "summary": "Destiny2.GetPublicVendors",
      "description": "Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor's available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: 'It's a long story...'",
      "get": {
        "tags": [
          "Destiny2",
          "Preview"
        ],
        "description": "Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor's available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: 'It's a long story...'",
        "operationId": "Destiny2.GetPublicVendors",
        "parameters": [
          {
            "name": "components",
            "in": "query",
            "description": "A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "description": "Represents the possible components that can be returned from Destiny \"Get\" calls such as GetProfile, GetCharacter, GetVendor etc...\r\nWhen making one of these requests, you will pass one or more of these components as a comma separated list in the \"?components=\" querystring parameter. For instance, if you want baseline Profile data, Character Data, and character progressions, you would pass \"?components=Profiles,Characters,CharacterProgressions\" You may use either the numerical or string values.",
                "format": "int32",
                "x-enum-reference": {
                  "$ref": "#/components/schemas/Destiny.DestinyComponentType"
                },
                "x-enum-is-bitmask": false
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.Responses.DestinyPublicVendorsResponse"
          }
        },
        "deprecated": false,
        "x-preview": true
      }
    },
    "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Collectibles/{collectiblePresentationNodeHash}/": {
      "summary": "Destiny2.GetCollectibleNodeDetails",
      "description": "Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.",
        "operationId": "Destiny2.GetCollectibleNodeDetails",
        "parameters": [
          {
            "name": "characterId",
            "in": "path",
            "description": "The Destiny Character ID of the character for whom we're getting collectible detail info.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "collectiblePresentationNodeHash",
            "in": "path",
            "description": "The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32"
            }
          },
          {
            "name": "components",
            "in": "query",
            "description": "A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "description": "Represents the possible components that can be returned from Destiny \"Get\" calls such as GetProfile, GetCharacter, GetVendor etc...\r\nWhen making one of these requests, you will pass one or more of these components as a comma separated list in the \"?components=\" querystring parameter. For instance, if you want baseline Profile data, Character Data, and character progressions, you would pass \"?components=Profiles,Characters,CharacterProgressions\" You may use either the numerical or string values.",
                "format": "int32",
                "x-enum-reference": {
                  "$ref": "#/components/schemas/Destiny.DestinyComponentType"
                },
                "x-enum-is-bitmask": false
              }
            }
          },
          {
            "name": "destinyMembershipId",
            "in": "path",
            "description": "Destiny membership ID of another user. You may be denied.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "A valid non-BungieNet membership type.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.Responses.DestinyCollectibleNodeDetailResponse"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/Actions/Items/TransferItem/": {
      "summary": "Destiny2.TransferItem",
      "description": "Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it's an instanced item. itshappening.gif",
      "post": {
        "tags": [
          "Destiny2"
        ],
        "description": "Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it's an instanced item. itshappening.gif",
        "operationId": "Destiny2.TransferItem",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Destiny.Requests.DestinyItemTransferRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/int32"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "MoveEquipDestinyItems"
            ]
          }
        ],
        "x-documentation-attributes": {
          "ThrottleSecondsBetweenActionPerUser": "0.1"
        }
      }
    },
    "/Destiny2/Actions/Items/PullFromPostmaster/": {
      "summary": "Destiny2.PullFromPostmaster",
      "description": "Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it's an instanced item.",
      "post": {
        "tags": [
          "Destiny2"
        ],
        "description": "Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it's an instanced item.",
        "operationId": "Destiny2.PullFromPostmaster",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Destiny.Requests.Actions.DestinyPostmasterTransferRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/int32"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "MoveEquipDestinyItems"
            ]
          }
        ],
        "x-documentation-attributes": {
          "ThrottleSecondsBetweenActionPerUser": "0.1"
        }
      }
    },
    "/Destiny2/Actions/Items/EquipItem/": {
      "summary": "Destiny2.EquipItem",
      "description": "Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.",
      "post": {
        "tags": [
          "Destiny2"
        ],
        "description": "Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.",
        "operationId": "Destiny2.EquipItem",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Destiny.Requests.Actions.DestinyItemActionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/int32"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "MoveEquipDestinyItems"
            ]
          }
        ],
        "x-documentation-attributes": {
          "ThrottleSecondsBetweenActionPerUser": "0.1"
        }
      }
    },
    "/Destiny2/Actions/Items/EquipItems/": {
      "summary": "Destiny2.EquipItems",
      "description": "Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.",
      "post": {
        "tags": [
          "Destiny2"
        ],
        "description": "Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.",
        "operationId": "Destiny2.EquipItems",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Destiny.Requests.Actions.DestinyItemSetActionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.DestinyEquipItemResults"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "MoveEquipDestinyItems"
            ]
          }
        ],
        "x-documentation-attributes": {
          "ThrottleSecondsBetweenActionPerUser": "0.1"
        }
      }
    },
    "/Destiny2/Actions/Items/SetLockState/": {
      "summary": "Destiny2.SetItemLockState",
      "description": "Set the Lock State for an instanced item. You must have a valid Destiny Account.",
      "post": {
        "tags": [
          "Destiny2"
        ],
        "description": "Set the Lock State for an instanced item. You must have a valid Destiny Account.",
        "operationId": "Destiny2.SetItemLockState",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Destiny.Requests.Actions.DestinyItemStateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/int32"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "MoveEquipDestinyItems"
            ]
          }
        ],
        "x-documentation-attributes": {
          "ThrottleSecondsBetweenActionPerUser": "0.1"
        }
      }
    },
    "/Destiny2/Actions/Items/SetTrackedState/": {
      "summary": "Destiny2.SetQuestTrackedState",
      "description": "Set the Tracking State for an instanced item, if that item is a Quest or Bounty. You must have a valid Destiny Account. Yeah, it's an item.",
      "post": {
        "tags": [
          "Destiny2"
        ],
        "description": "Set the Tracking State for an instanced item, if that item is a Quest or Bounty. You must have a valid Destiny Account. Yeah, it's an item.",
        "operationId": "Destiny2.SetQuestTrackedState",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Destiny.Requests.Actions.DestinyItemStateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/int32"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "MoveEquipDestinyItems"
            ]
          }
        ],
        "x-documentation-attributes": {
          "ThrottleSecondsBetweenActionPerUser": "1"
        }
      }
    },
    "/Destiny2/Actions/Items/InsertSocketPlug/": {
      "summary": "Destiny2.InsertSocketPlug",
      "description": "Insert a plug into a socketed item. I know how it sounds, but I assure you it's much more G-rated than you might be guessing. We haven't decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for 'InsertPlugs' from the account owner.",
      "post": {
        "tags": [
          "Destiny2",
          "Preview"
        ],
        "description": "Insert a plug into a socketed item. I know how it sounds, but I assure you it's much more G-rated than you might be guessing. We haven't decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for 'InsertPlugs' from the account owner.",
        "operationId": "Destiny2.InsertSocketPlug",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Destiny.Requests.Actions.DestinyInsertPlugsActionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.Responses.DestinyItemChangeResponse"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdvancedWriteActions"
            ]
          }
        ],
        "x-preview": true,
        "x-documentation-attributes": {
          "ThrottleSecondsBetweenActionPerUser": "0.5"
        }
      }
    },
    "/Destiny2/Actions/Items/InsertSocketPlugFree/": {
      "summary": "Destiny2.InsertSocketPlugFree",
      "description": "Insert a 'free' plug into an item's socket. This does not require 'Advanced Write Action' authorization and is available to 3rd-party apps, but will only work on 'free and reversible' socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.",
      "post": {
        "tags": [
          "Destiny2",
          "Preview"
        ],
        "description": "Insert a 'free' plug into an item's socket. This does not require 'Advanced Write Action' authorization and is available to 3rd-party apps, but will only work on 'free and reversible' socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.",
        "operationId": "Destiny2.InsertSocketPlugFree",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Destiny.Requests.Actions.DestinyInsertPlugsFreeActionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.Responses.DestinyItemChangeResponse"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "MoveEquipDestinyItems"
            ]
          }
        ],
        "x-preview": true,
        "x-documentation-attributes": {
          "ThrottleSecondsBetweenActionPerUser": "0.5"
        }
      }
    },
    "/Destiny2/Stats/PostGameCarnageReport/{activityId}/": {
      "summary": "Destiny2.GetPostGameCarnageReport",
      "description": "Gets the available post game carnage report for the activity ID.",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Gets the available post game carnage report for the activity ID.",
        "operationId": "Destiny2.GetPostGameCarnageReport",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "description": "The ID of the activity whose PGCR is requested.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.HistoricalStats.DestinyPostGameCarnageReportData"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/Stats/PostGameCarnageReport/{activityId}/Report/": {
      "summary": "Destiny2.ReportOffensivePostGameCarnageReportPlayer",
      "description": "Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.",
      "post": {
        "tags": [
          "Destiny2"
        ],
        "description": "Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.",
        "operationId": "Destiny2.ReportOffensivePostGameCarnageReportPlayer",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "description": "The ID of the activity where you ran into the brigand that you're reporting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Destiny.Reporting.Requests.DestinyReportOffensePgcrRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/int32"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "BnetWrite"
            ]
          }
        ]
      }
    },
    "/Destiny2/Stats/Definition/": {
      "summary": "Destiny2.GetHistoricalStatsDefinition",
      "description": "Gets historical stats definitions.",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Gets historical stats definitions.",
        "operationId": "Destiny2.GetHistoricalStatsDefinition",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReadOnlyDictionaryOfstringAndDestinyHistoricalStatsDefinition"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/Stats/Leaderboards/Clans/{groupId}/": {
      "summary": "Destiny2.GetClanLeaderboards",
      "description": "Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.",
      "get": {
        "tags": [
          "Destiny2",
          "Preview"
        ],
        "description": "Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.",
        "operationId": "Destiny2.GetClanLeaderboards",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID of the clan whose leaderboards you wish to fetch.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "maxtop",
            "in": "query",
            "description": "Maximum number of top players to return. Use a large number to get entire leaderboard.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "modes",
            "in": "query",
            "description": "List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statid",
            "in": "query",
            "description": "ID of stat to return rather than returning all Leaderboard stats.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.HistoricalStats.DestinyLeaderboardResults"
          }
        },
        "deprecated": false,
        "x-preview": true
      }
    },
    "/Destiny2/Stats/AggregateClanStats/{groupId}/": {
      "summary": "Destiny2.GetClanAggregateStats",
      "description": "Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.",
      "get": {
        "tags": [
          "Destiny2",
          "Preview"
        ],
        "description": "Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.",
        "operationId": "Destiny2.GetClanAggregateStats",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID of the clan whose leaderboards you wish to fetch.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "modes",
            "in": "query",
            "description": "List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListOfDestinyClanAggregateStat"
          }
        },
        "deprecated": false,
        "x-preview": true
      }
    },
    "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/": {
      "summary": "Destiny2.GetLeaderboards",
      "description": "Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.",
      "get": {
        "tags": [
          "Destiny2",
          "Preview"
        ],
        "description": "Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.",
        "operationId": "Destiny2.GetLeaderboards",
        "parameters": [
          {
            "name": "destinyMembershipId",
            "in": "path",
            "description": "The Destiny membershipId of the user to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "maxtop",
            "in": "query",
            "description": "Maximum number of top players to return. Use a large number to get entire leaderboard.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "A valid non-BungieNet membership type.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "modes",
            "in": "query",
            "description": "List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statid",
            "in": "query",
            "description": "ID of stat to return rather than returning all Leaderboard stats.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.HistoricalStats.DestinyLeaderboardResults"
          }
        },
        "deprecated": false,
        "x-preview": true
      }
    },
    "/Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/": {
      "summary": "Destiny2.GetLeaderboardsForCharacter",
      "description": "Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.",
      "get": {
        "tags": [
          "Destiny2",
          "Preview"
        ],
        "description": "Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.",
        "operationId": "Destiny2.GetLeaderboardsForCharacter",
        "parameters": [
          {
            "name": "characterId",
            "in": "path",
            "description": "The specific character to build the leaderboard around for the provided Destiny Membership.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "destinyMembershipId",
            "in": "path",
            "description": "The Destiny membershipId of the user to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "maxtop",
            "in": "query",
            "description": "Maximum number of top players to return. Use a large number to get entire leaderboard.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "A valid non-BungieNet membership type.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "modes",
            "in": "query",
            "description": "List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statid",
            "in": "query",
            "description": "ID of stat to return rather than returning all Leaderboard stats.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.HistoricalStats.DestinyLeaderboardResults"
          }
        },
        "deprecated": false,
        "x-preview": true
      }
    },
    "/Destiny2/Armory/Search/{type}/{searchTerm}/": {
      "summary": "Destiny2.SearchDestinyEntities",
      "description": "Gets a page list of Destiny items.",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Gets a page list of Destiny items.",
        "operationId": "Destiny2.SearchDestinyEntities",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to return, starting with 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "searchTerm",
            "in": "path",
            "description": "The string to use when searching for Destiny entities.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "The type of entity for whom you would like results. These correspond to the entity's definition contract name. For instance, if you are looking for items, this property should be 'DestinyInventoryItemDefinition'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.Definitions.DestinyEntitySearchResult"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/": {
      "summary": "Destiny2.GetHistoricalStats",
      "description": "Gets historical stats for indicated character.",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Gets historical stats for indicated character.",
        "operationId": "Destiny2.GetHistoricalStats",
        "parameters": [
          {
            "name": "characterId",
            "in": "path",
            "description": "The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "dayend",
            "in": "query",
            "description": "Last day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "daystart",
            "in": "query",
            "description": "First day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "destinyMembershipId",
            "in": "path",
            "description": "The Destiny membershipId of the user to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "groups",
            "in": "query",
            "description": "Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "description": "If the enum value is > 100, it is a \"special\" group that cannot be queried for directly (special cases apply to when they are returned, and are not relevant in general cases)",
                "format": "int32",
                "x-enum-reference": {
                  "$ref": "#/components/schemas/Destiny.HistoricalStats.Definitions.DestinyStatsGroupType"
                },
                "x-enum-is-bitmask": false
              }
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "A valid non-BungieNet membership type.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "modes",
            "in": "query",
            "description": "Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "description": "For historical reasons, this list will have both D1 and D2-relevant Activity Modes in it. Please don't take this to mean that some D1-only feature is coming back!",
                "format": "int32",
                "x-enum-reference": {
                  "$ref": "#/components/schemas/Destiny.HistoricalStats.Definitions.DestinyActivityModeType"
                },
                "x-enum-is-bitmask": false
              }
            }
          },
          {
            "name": "periodType",
            "in": "query",
            "description": "Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity",
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Destiny.HistoricalStats.Definitions.PeriodType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.HistoricalStats.DestinyHistoricalStatsResults"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/": {
      "summary": "Destiny2.GetHistoricalStatsForAccount",
      "description": "Gets aggregate historical stats organized around each character for a given account.",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Gets aggregate historical stats organized around each character for a given account.",
        "operationId": "Destiny2.GetHistoricalStatsForAccount",
        "parameters": [
          {
            "name": "destinyMembershipId",
            "in": "path",
            "description": "The Destiny membershipId of the user to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "groups",
            "in": "query",
            "description": "Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "description": "If the enum value is > 100, it is a \"special\" group that cannot be queried for directly (special cases apply to when they are returned, and are not relevant in general cases)",
                "format": "int32",
                "x-enum-reference": {
                  "$ref": "#/components/schemas/Destiny.HistoricalStats.Definitions.DestinyStatsGroupType"
                },
                "x-enum-is-bitmask": false
              }
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "A valid non-BungieNet membership type.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.HistoricalStats.DestinyHistoricalStatsAccountResult"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/Activities/": {
      "summary": "Destiny2.GetActivityHistory",
      "description": "Gets activity history stats for indicated character.",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Gets activity history stats for indicated character.",
        "operationId": "Destiny2.GetActivityHistory",
        "parameters": [
          {
            "name": "characterId",
            "in": "path",
            "description": "The id of the character to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of rows to return",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "destinyMembershipId",
            "in": "path",
            "description": "The Destiny membershipId of the user to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "A valid non-BungieNet membership type.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation.",
            "schema": {
              "type": "integer",
              "description": "For historical reasons, this list will have both D1 and D2-relevant Activity Modes in it. Please don't take this to mean that some D1-only feature is coming back!",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Destiny.HistoricalStats.Definitions.DestinyActivityModeType"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to return, starting with 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.HistoricalStats.DestinyActivityHistoryResults"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/UniqueWeapons/": {
      "summary": "Destiny2.GetUniqueWeaponHistory",
      "description": "Gets details about unique weapon usage, including all exotic weapons.",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Gets details about unique weapon usage, including all exotic weapons.",
        "operationId": "Destiny2.GetUniqueWeaponHistory",
        "parameters": [
          {
            "name": "characterId",
            "in": "path",
            "description": "The id of the character to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "destinyMembershipId",
            "in": "path",
            "description": "The Destiny membershipId of the user to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "A valid non-BungieNet membership type.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.HistoricalStats.DestinyHistoricalWeaponStatsData"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/AggregateActivityStats/": {
      "summary": "Destiny2.GetDestinyAggregateActivityStats",
      "description": "Gets all activities the character has participated in together with aggregate statistics for those activities.",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Gets all activities the character has participated in together with aggregate statistics for those activities.",
        "operationId": "Destiny2.GetDestinyAggregateActivityStats",
        "parameters": [
          {
            "name": "characterId",
            "in": "path",
            "description": "The specific character whose activities should be returned.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "destinyMembershipId",
            "in": "path",
            "description": "The Destiny membershipId of the user to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "membershipType",
            "in": "path",
            "description": "A valid non-BungieNet membership type.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/BungieMembershipType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.HistoricalStats.DestinyAggregateActivityResults"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/Milestones/{milestoneHash}/Content/": {
      "summary": "Destiny2.GetPublicMilestoneContent",
      "description": "Gets custom localized content for the milestone of the given hash, if it exists.",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Gets custom localized content for the milestone of the given hash, if it exists.",
        "operationId": "Destiny2.GetPublicMilestoneContent",
        "parameters": [
          {
            "name": "milestoneHash",
            "in": "path",
            "description": "The identifier for the milestone to be returned.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.Milestones.DestinyMilestoneContent"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/Milestones/": {
      "summary": "Destiny2.GetPublicMilestones",
      "description": "Gets public information about currently available Milestones.",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Gets public information about currently available Milestones.",
        "operationId": "Destiny2.GetPublicMilestones",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DictionaryOfuint32AndDestinyPublicMilestone"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/Awa/Initialize/": {
      "summary": "Destiny2.AwaInitializeRequest",
      "description": "Initialize a request to perform an advanced write action.",
      "post": {
        "tags": [
          "Destiny2"
        ],
        "description": "Initialize a request to perform an advanced write action.",
        "operationId": "Destiny2.AwaInitializeRequest",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Destiny.Advanced.AwaPermissionRequested"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.Advanced.AwaInitializeResponse"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdvancedWriteActions"
            ]
          }
        ]
      }
    },
    "/Destiny2/Awa/AwaProvideAuthorizationResult/": {
      "summary": "Destiny2.AwaProvideAuthorizationResult",
      "description": "Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.",
      "post": {
        "tags": [
          "Destiny2"
        ],
        "description": "Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.",
        "operationId": "Destiny2.AwaProvideAuthorizationResult",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Destiny.Advanced.AwaUserResponse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/int32"
          }
        },
        "deprecated": false
      }
    },
    "/Destiny2/Awa/GetActionToken/{correlationId}/": {
      "summary": "Destiny2.AwaGetActionToken",
      "description": "Returns the action token if user approves the request.",
      "get": {
        "tags": [
          "Destiny2"
        ],
        "description": "Returns the action token if user approves the request.",
        "operationId": "Destiny2.AwaGetActionToken",
        "parameters": [
          {
            "name": "correlationId",
            "in": "path",
            "description": "The identifier for the advanced write action request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Destiny.Advanced.AwaAuthorizationResult"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "AdvancedWriteActions"
            ]
          }
        ]
      }
    },
    "/CommunityContent/Get/{sort}/{mediaFilter}/{page}/": {
      "summary": "CommunityContent.GetCommunityContent",
      "description": "Returns community content.",
      "get": {
        "tags": [
          "CommunityContent"
        ],
        "description": "Returns community content.",
        "operationId": "CommunityContent.GetCommunityContent",
        "parameters": [
          {
            "name": "mediaFilter",
            "in": "path",
            "description": "The type of media to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Forum.ForumTopicsCategoryFiltersEnum"
              },
              "x-enum-is-bitmask": true
            }
          },
          {
            "name": "page",
            "in": "path",
            "description": "Zero based page",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "path",
            "description": "The sort mode.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "byte",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Forum.CommunityContentSortMode"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Forum.PostSearchResponse"
          }
        },
        "deprecated": false
      }
    },
    "/Trending/Categories/": {
      "summary": "Trending.GetTrendingCategories",
      "description": "Returns trending items for Bungie.net, collapsed into the first page of items per category. For pagination within a category, call GetTrendingCategory.",
      "get": {
        "tags": [
          "Trending"
        ],
        "description": "Returns trending items for Bungie.net, collapsed into the first page of items per category. For pagination within a category, call GetTrendingCategory.",
        "operationId": "Trending.GetTrendingCategories",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Trending.TrendingCategories"
          }
        },
        "deprecated": false
      }
    },
    "/Trending/Categories/{categoryId}/{pageNumber}/": {
      "summary": "Trending.GetTrendingCategory",
      "description": "Returns paginated lists of trending items for a category.",
      "get": {
        "tags": [
          "Trending"
        ],
        "description": "Returns paginated lists of trending items for a category.",
        "operationId": "Trending.GetTrendingCategory",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "The ID of the category for whom you want additional results.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "path",
            "description": "The page # of results to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchResultOfTrendingEntry"
          }
        },
        "deprecated": false
      }
    },
    "/Trending/Details/{trendingEntryType}/{identifier}/": {
      "summary": "Trending.GetTrendingEntryDetail",
      "description": "Returns the detailed results for a specific trending entry. Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique.",
      "get": {
        "tags": [
          "Trending"
        ],
        "description": "Returns the detailed results for a specific trending entry. Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique.",
        "operationId": "Trending.GetTrendingEntryDetail",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "The identifier for the entity to be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trendingEntryType",
            "in": "path",
            "description": "The type of entity to be returned.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The known entity types that you can have returned from Trending.",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Trending.TrendingEntryType"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Trending.TrendingDetail"
          }
        },
        "deprecated": false
      }
    },
    "/Fireteam/Clan/{groupId}/ActiveCount/": {
      "summary": "Fireteam.GetActivePrivateClanFireteamCount",
      "description": "Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.",
      "get": {
        "tags": [
          "Fireteam"
        ],
        "description": "Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.",
        "operationId": "Fireteam.GetActivePrivateClanFireteamCount",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id of the clan.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/int32"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "ReadGroups"
            ]
          }
        ]
      }
    },
    "/Fireteam/Clan/{groupId}/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{publicOnly}/{page}/": {
      "summary": "Fireteam.GetAvailableClanFireteams",
      "description": "Gets a listing of all of this clan's fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.",
      "get": {
        "tags": [
          "Fireteam"
        ],
        "description": "Gets a listing of all of this clan's fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.",
        "operationId": "Fireteam.GetAvailableClanFireteams",
        "parameters": [
          {
            "name": "activityType",
            "in": "path",
            "description": "The activity type to filter by.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dateRange",
            "in": "path",
            "description": "The date range to grab available fireteams.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "byte",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Fireteam.FireteamDateRange"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id of the clan.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "langFilter",
            "in": "query",
            "description": "An optional language filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "path",
            "description": "Zero based page",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "platform",
            "in": "path",
            "description": "The platform filter.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "byte",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Fireteam.FireteamPlatform"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "publicOnly",
            "in": "path",
            "description": "Determines public/private filtering.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "byte",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Fireteam.FireteamPublicSearchOption"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "slotFilter",
            "in": "path",
            "description": "Filters based on available slots",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "byte",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Fireteam.FireteamSlotSearch"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchResultOfFireteamSummary"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "ReadGroups"
            ]
          }
        ]
      }
    },
    "/Fireteam/Search/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{page}/": {
      "summary": "Fireteam.SearchPublicAvailableClanFireteams",
      "description": "Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.",
      "get": {
        "tags": [
          "Fireteam"
        ],
        "description": "Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.",
        "operationId": "Fireteam.SearchPublicAvailableClanFireteams",
        "parameters": [
          {
            "name": "activityType",
            "in": "path",
            "description": "The activity type to filter by.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dateRange",
            "in": "path",
            "description": "The date range to grab available fireteams.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "byte",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Fireteam.FireteamDateRange"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "langFilter",
            "in": "query",
            "description": "An optional language filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "path",
            "description": "Zero based page",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "platform",
            "in": "path",
            "description": "The platform filter.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "byte",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Fireteam.FireteamPlatform"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "slotFilter",
            "in": "path",
            "description": "Filters based on available slots",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "byte",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Fireteam.FireteamSlotSearch"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchResultOfFireteamSummary"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "ReadGroups"
            ]
          }
        ]
      }
    },
    "/Fireteam/Clan/{groupId}/My/{platform}/{includeClosed}/{page}/": {
      "summary": "Fireteam.GetMyClanFireteams",
      "description": "Gets a listing of all fireteams that caller is an applicant, a member, or an alternate of.",
      "get": {
        "tags": [
          "Fireteam"
        ],
        "description": "Gets a listing of all fireteams that caller is an applicant, a member, or an alternate of.",
        "operationId": "Fireteam.GetMyClanFireteams",
        "parameters": [
          {
            "name": "groupFilter",
            "in": "query",
            "description": "If true, filter by clan. Otherwise, ignore the clan and show all of the user's fireteams.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "includeClosed",
            "in": "path",
            "description": "If true, return fireteams that have been closed.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "langFilter",
            "in": "query",
            "description": "An optional language filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "path",
            "description": "Deprecated parameter, ignored.",
            "required": true,
            "deprecated": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "platform",
            "in": "path",
            "description": "The platform filter.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "byte",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Fireteam.FireteamPlatform"
              },
              "x-enum-is-bitmask": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchResultOfFireteamResponse"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "ReadGroups"
            ]
          }
        ]
      }
    },
    "/Fireteam/Clan/{groupId}/Summary/{fireteamId}/": {
      "summary": "Fireteam.GetClanFireteam",
      "description": "Gets a specific fireteam.",
      "get": {
        "tags": [
          "Fireteam"
        ],
        "description": "Gets a specific fireteam.",
        "operationId": "Fireteam.GetClanFireteam",
        "parameters": [
          {
            "name": "fireteamId",
            "in": "path",
            "description": "The unique id of the fireteam.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The group id of the clan.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Fireteam.FireteamResponse"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "ReadGroups"
            ]
          }
        ]
      }
    },
    "/Social/Friends/": {
      "summary": "Social.GetFriendList",
      "description": "Returns your Bungie Friend list",
      "get": {
        "tags": [
          "Social"
        ],
        "description": "Returns your Bungie Friend list",
        "operationId": "Social.GetFriendList",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Social.Friends.BungieFriendListResponse"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "ReadUserData"
            ]
          }
        ]
      }
    },
    "/Social/Friends/Requests/": {
      "summary": "Social.GetFriendRequestList",
      "description": "Returns your friend request queue.",
      "get": {
        "tags": [
          "Social"
        ],
        "description": "Returns your friend request queue.",
        "operationId": "Social.GetFriendRequestList",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Social.Friends.BungieFriendRequestListResponse"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "ReadUserData"
            ]
          }
        ]
      }
    },
    "/Social/Friends/Add/{membershipId}/": {
      "summary": "Social.IssueFriendRequest",
      "description": "Requests a friend relationship with the target user. Any of the target user's linked membership ids are valid inputs.",
      "post": {
        "tags": [
          "Social"
        ],
        "description": "Requests a friend relationship with the target user. Any of the target user's linked membership ids are valid inputs.",
        "operationId": "Social.IssueFriendRequest",
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "description": "The membership id of the user you wish to add.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/boolean"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "BnetWrite"
            ]
          }
        ]
      }
    },
    "/Social/Friends/Requests/Accept/{membershipId}/": {
      "summary": "Social.AcceptFriendRequest",
      "description": "Accepts a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.",
      "post": {
        "tags": [
          "Social"
        ],
        "description": "Accepts a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.",
        "operationId": "Social.AcceptFriendRequest",
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "description": "The membership id of the user you wish to accept.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/boolean"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "BnetWrite"
            ]
          }
        ]
      }
    },
    "/Social/Friends/Requests/Decline/{membershipId}/": {
      "summary": "Social.DeclineFriendRequest",
      "description": "Declines a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.",
      "post": {
        "tags": [
          "Social"
        ],
        "description": "Declines a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.",
        "operationId": "Social.DeclineFriendRequest",
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "description": "The membership id of the user you wish to decline.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/boolean"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "BnetWrite"
            ]
          }
        ]
      }
    },
    "/Social/Friends/Remove/{membershipId}/": {
      "summary": "Social.RemoveFriend",
      "description": "Remove a friend relationship with the target user. The user must be on your friend list, though no error will occur if they are not.",
      "post": {
        "tags": [
          "Social"
        ],
        "description": "Remove a friend relationship with the target user. The user must be on your friend list, though no error will occur if they are not.",
        "operationId": "Social.RemoveFriend",
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "description": "The membership id of the user you wish to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/boolean"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "BnetWrite"
            ]
          }
        ]
      }
    },
    "/Social/Friends/Requests/Remove/{membershipId}/": {
      "summary": "Social.RemoveFriendRequest",
      "description": "Remove a friend relationship with the target user. The user must be on your outgoing request friend list, though no error will occur if they are not.",
      "post": {
        "tags": [
          "Social"
        ],
        "description": "Remove a friend relationship with the target user. The user must be on your outgoing request friend list, though no error will occur if they are not.",
        "operationId": "Social.RemoveFriendRequest",
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "description": "The membership id of the user you wish to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/boolean"
          }
        },
        "deprecated": false,
        "security": [
          {
            "oauth2": [
              "BnetWrite"
            ]
          }
        ]
      }
    },
    "/Social/PlatformFriends/{friendPlatform}/{page}/": {
      "summary": "Social.GetPlatformFriendList",
      "description": "Gets the platform friend of the requested type, with additional information if they have Bungie accounts. Must have a recent login session with said platform.",
      "get": {
        "tags": [
          "Social"
        ],
        "description": "Gets the platform friend of the requested type, with additional information if they have Bungie accounts. Must have a recent login session with said platform.",
        "operationId": "Social.GetPlatformFriendList",
        "parameters": [
          {
            "name": "friendPlatform",
            "in": "path",
            "description": "The platform friend type.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-enum-reference": {
                "$ref": "#/components/schemas/Social.Friends.PlatformFriendType"
              },
              "x-enum-is-bitmask": false
            }
          },
          {
            "name": "page",
            "in": "path",
            "description": "The zero based page to return. Page size is 100.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Social.Friends.PlatformFriendResponse"
          }
        },
        "deprecated": false
      }
    },
    "/GetAvailableLocales/": {
      "summary": ".GetAvailableLocales",
      "description": "List of available localization cultures",
      "get": {
        "tags": [
          ""
        ],
        "description": "List of available localization cultures",
        "operationId": ".GetAvailableLocales",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CEDictionaryOfstringAndstring"
          }
        },
        "deprecated": false
      }
    },
    "/Settings/": {
      "summary": ".GetCommonSettings",
      "description": "Get the common settings used by the Bungie.Net environment.",
      "get": {
        "tags": [
          ""
        ],
        "description": "Get the common settings used by the Bungie.Net environment.",
        "operationId": ".GetCommonSettings",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Common.Models.CoreSettingsConfiguration"
          }
        },
        "deprecated": false
      }
    },
    "/UserSystemOverrides/": {
      "summary": ".GetUserSystemOverrides",
      "description": "Get the user-specific system overrides that should be respected alongside common systems.",
      "get": {
        "tags": [
          ""
        ],
        "description": "Get the user-specific system overrides that should be respected alongside common systems.",
        "operationId": ".GetUserSystemOverrides",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DictionaryOfstringAndCoreSystem"
          }
        },
        "deprecated": false
      }
    },
    "/GlobalAlerts/": {
      "summary": ".GetGlobalAlerts",
      "description": "Gets any active global alert for display in the forum banners, help pages, etc. Usually used for DOC alerts.",
      "get": {
        "tags": [
          ""
        ],
        "description": "Gets any active global alert for display in the forum banners, help pages, etc. Usually used for DOC alerts.",
        "operationId": ".GetGlobalAlerts",
        "parameters": [
          {
            "name": "includestreaming",
            "in": "query",
            "description": "Determines whether Streaming Alerts are included in results",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CEListOfGlobalAlert"
          }
        },
        "deprecated": false
      }
    }
  },